generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id    String @id @default(uuid())
    name  String
    email String @unique
}

model Image {
    id        String    @id @default(uuid())
    type      ImageType
    url       String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    blogs     Blog[]
    companies Company[]
}

model Topic {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    faqs      Faq[]
}

model Faq {
    id        String   @id @default(uuid())
    topicId   String
    question  String
    answer    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    topic     Topic    @relation(fields: [topicId], references: [id])
}

model Blog {
    slug      String   @id
    title     String
    content   String
    imageId   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    thumbnail Image?   @relation(fields: [imageId], references: [id])
}

model Branch {
    id        String   @id @default(uuid())
    name      String
    address   String
    latitude  Float
    longitude Float
    phone     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Trainer {
    id          String   @id @default(uuid())
    name        String
    bio         String?
    expertise   String
    experience  String
    designation String
    photoUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Company {
    id         String      @id @default(uuid())
    name       String
    isPremium  Boolean     @default(false)
    imageId    String
    logo       Image       @relation(fields: [imageId], references: [id])
    placements Placement[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

model Placement {
    id           String        @id @default(uuid())
    name         String
    role         String
    photoUrl     String?
    companyId    String
    company      Company       @relation(fields: [companyId], references: [id])
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    testimonials Testimonial[]
}

model Testimonial {
    id          String    @id @default(uuid())
    content     String
    rating      Int
    placementId String
    placement   Placement @relation(fields: [placementId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Course {
    id          String   @id @default(uuid())
    title       String
    subtitle    String
    description String
    duration    String
    language    String[]
    mode        String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Usp {
    id           String   @id @default(uuid())
    heading      String
    subheading   String
    bulletPoints String[]
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Setting {
    id          String   @id @default(uuid())
    key         String   @unique
    value       String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum ImageType {
    LOGO
    HERO
    BLOG
    COMPANY
}
